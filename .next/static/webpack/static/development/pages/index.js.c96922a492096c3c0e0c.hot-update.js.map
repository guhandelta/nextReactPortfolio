{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c96922a492096c3c0e0c.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\r\n\r\nclass Auth0{\r\n    constructor(){\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'guhaprasaanth.auth0.com',\r\n            clientID: 'pcZ8trYSuvn2qMqE720lSdIPaBQPSHLE', // ClienID from Auth0\r\n            redirectUri : 'http://localhost:4000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        \r\n    }\r\n\r\n    handleAuthentication(){\r\n        debugger;\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => { //parseHash() will parse the hash in the url and returns authResult\r\n                // using the authResult returned by parseHash, it can be determined if the user is logged in or not\r\n                if( authResult && authResult.accessToken && authResult.idToken ){\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if(err){\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setSession(authResult){\r\n        // debugger;\r\n        // // Set the Token expiration time\r\n        // const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n        // // localStorage.setItem('access_token', authResult.accessToken);\r\n\r\n        // Cookies.set('user', authResult.idTokenPayload);\r\n        // Cookies.set('jwt', authResult.idToken);\r\n        // Cookies.set('expiesAt', expiresAt);\r\n    }\r\n\r\n    login(){\r\n        this.auth0.authorize();\r\n    }\r\n\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAIA;AAEA;;;;A","sourceRoot":""}