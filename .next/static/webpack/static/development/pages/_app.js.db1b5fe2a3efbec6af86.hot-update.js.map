{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.db1b5fe2a3efbec6af86.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\r\nimport Cookies from 'js-cookie';\r\nimport jwt from 'jsonwebtoken';\r\nimport axios from 'axios';\r\n\r\nclass Auth0{\r\n    constructor(){\r\n        this.auth0 = new auth0.WebAuth({\r\n            domain: 'guhaprasaanth.auth0.com',\r\n            clientID: 'pcZ8trYSuvn2qMqE720lSdIPaBQPSHLE', // ClienID from Auth0\r\n            redirectUri : 'http://localhost:4000/callback',\r\n            responseType: 'token id_token',\r\n            scope: 'openid profile'\r\n        });\r\n\r\n        this.login = this.login.bind(this);\r\n        this.handleAuthentication = this.handleAuthentication.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    handleAuthentication(){\r\n        return new Promise((resolve, reject) => {\r\n            this.auth0.parseHash((err, authResult) => { //parseHash() will parse the hash in the url and returns authResult\r\n                // using the authResult returned by parseHash, it can be determined if the user is logged in or not\r\n                if( authResult && authResult.accessToken && authResult.idToken ){\r\n                    this.setSession(authResult);\r\n                    resolve();\r\n                } else if(err){\r\n                    reject(err);\r\n                    console.log(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    \r\n    setSession(authResult){\r\n        // Set the Token expiration time\r\n        const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n        // localStorage.setItem('access_token', authResult.accessToken);\r\n\r\n        Cookies.set('user', authResult.idTokenPayload);\r\n        Cookies.set('jwt', authResult.idToken);\r\n        Cookies.set('expiresAt', expiresAt);\r\n    }\r\n\r\n    logout(){\r\n        Cookies.remove('user');\r\n        Cookies.remove('jwt');\r\n        Cookies.remove('expiresAt');\r\n\r\n        this.auth0.logout({\r\n            returnTo: '',\r\n            clientID: 'pcZ8trYSuvn2qMqE720lSdIPaBQPSHLE'\r\n        })\r\n    }\r\n    \r\n    login(){\r\n        this.auth0.authorize();\r\n    }\r\n\r\n    async getJWKS(){\r\n        const res = await axios.get('https://guhaprasaanth.auth0.com/.well-known/jwks.json'); // get req to this endpoint to get JWKS\r\n        const jwks = res.data;\r\n        return jwks;\r\n    }\r\n\r\n    async verifyToken(token){\r\n        if(token){ // JWKS => JSON Web Key -> set of public keys that are used to verify JWT, \r\n            //- issued by authorization server(Auth0 in this application) and signed using the RS256 \r\n            const decodedToken = jwt.decode(token, {complete: true}); \r\n            // The property, complete should be specified to access the header of the token\r\n            const jwks = await this.getJWKS(); // returns array(object)) of keys\r\n            console.log(jwks);\r\n            const jwk = jwks.keys[0];\r\n            console.log(jwk);\r\n            // Build Certificate\r\n            let cert = jwk.x5c[0];// Extracting the certificate\r\n            cert = cert.match(/.{1,64}/g).join('\\n'); // THe RegEx will create an array of strings, 64char long, \r\n            // which is later joined with a new line\r\n            cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`\r\n            // Compare the kid(Key ID) property of the token and the public key\r\n            if(jwk.kid === decodedToken.header.kid){\r\n                try{\r\n                    const verifiedToken = jwt.verify(token, cert);\r\n                    const expiresAt = verifiedToken.exp * 1000;\r\n                    // If a decoded token exists && current time is < expiresAt\r\n                    return (verifiedToken && new Date().getTime() < expiresAt) ? verifiedToken : undefined;\r\n\r\n                }catch(err){\r\n                    return undefined;\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        // If there is no token\r\n        return undefined;\r\n    }\r\n\r\n    async clientAuth(){\r\n        debugger;\r\n        const token = Cookies.getJSON('jwt')    \r\n        const verifiedToken = await this.verifyToken(token);\r\n\r\n        return verifiedToken;\r\n    };\r\n\r\n\r\n    async serverAuth(req){ //The request obj(req) is available in the server side from the prop 'ctx' passed into getInitialProps()\r\n    // The cookies on the server may be found in the request obj\r\n        if(req.headers.cookie){\r\n            const tokenCookie = req.headers.cookie.split(';').find(c => c.trim().startsWith('jwt'));\r\n            \r\n            if(!tokenCookie) {return undefined}; // Return undefined if the expiresAtCookie is not available\r\n            \r\n            const token = tokenCookie.split('=')[1];// split() => returns array of expiresAt text, where 2nd value'[1]' is date\r\n            const verifiedToken = await this.verifyToken(token);\r\n\r\n            return verifiedToken;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n\r\nconst auth0Client = new Auth0();\r\n\r\nexport default auth0Client;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;;;;;;;;;;;AAGA;AACA;;AADA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAEA;;;;;AACA;AAAA;AAAA;AACA;AACA;;;;;AAAA;AACA;;AADA;AACA;AACA;AACA;;AAAA;AACA;;AADA;AAEA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;;;;A","sourceRoot":""}