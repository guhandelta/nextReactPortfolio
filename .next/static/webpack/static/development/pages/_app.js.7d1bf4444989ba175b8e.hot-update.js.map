{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.7d1bf4444989ba175b8e.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["// Next.js uses the App component to initialize pages. You can override it and control the page initialization. \r\n// -Which allows you to do amazing things like:\r\n\r\n// Persisting layout between page changes\r\n// Keeping state when navigating pages\r\n// Custom error handling using componentDidCatch\r\n// Inject additional data into pages (for example by processing GraphQL queries)\r\n\r\n// This component is the wrapper component for all the pages\r\n\r\nimport React from 'react';\r\nimport app, { Container } from 'next/app';\r\nimport auth0 from '../services/auth0';\r\n\r\n// Styling\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../styles/main.scss';\r\n\r\nexport default class MyApp extends app{\r\n    static async getInitialProps({Component, router, ctx}){\r\n        let pageProps = {}\r\n        // getInitialProps is a best choice to check if the user is authenticated or not, as it runs on both the client and serve,-\r\n        //- for every pages in the application\r\n        const isAuthenticated = process.browser ? auth0.clientAuth() : auth0.serverAuth(ctx.req);\r\n        // Check the enviroment where getInitialProps() is currently executed and call the appropriate Authenticaiton fn() \r\n\r\n        if(Component.getInitialProps){ // Check if the component has getInitialProps()\r\n            pageProps = await Component.getInitialProps(ctx) // Get the parameters for the page here\r\n        }\r\n\r\n        const auth = { isAuthenticated };\r\n\r\n        return { pageProps, auth }; // Pass the page params as props\r\n    }\r\n\r\n    render(){\r\n        const { Component, pageProps, auth } = this.props;\r\n\r\n        return(\r\n            <Container>\r\n                <Component {...pageProps} />\r\n            </Container>\r\n        )\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AAiBA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;;;;;;;;;;;;AAxBA;AACA;AAEA;AACA;AAAA;AACA;AAEA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAfA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}