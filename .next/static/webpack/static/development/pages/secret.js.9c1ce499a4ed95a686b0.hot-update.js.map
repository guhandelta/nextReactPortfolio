{"version":3,"file":"static/webpack/static\\development\\pages\\secret.js.9c1ce499a4ed95a686b0.hot-update.js","sources":["webpack:///./services/auth0.js"],"sourcesContent":["import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { getCookieFromReq } from '../helper/utils';\n\nclass Auth0{\n    constructor(){\n        this.auth0 = new auth0.WebAuth({\n            domain: 'guhaprasaanth.auth0.com',\n            clientID: 'pcZ8trYSuvn2qMqE720lSdIPaBQPSHLE', // ClienID from Auth0\n            redirectUri : 'http://localhost:4000/callback',\n            responseType: 'token id_token',\n            scope: 'openid profile'\n        });\n\n        this.login = this.login.bind(this);\n        this.handleAuthentication = this.handleAuthentication.bind(this);\n        this.logout = this.logout.bind(this);\n    }\n\n    handleAuthentication(){\n        return new Promise((resolve, reject) => {\n            this.auth0.parseHash((err, authResult) => { //parseHash() will parse the hash in the url and returns authResult\n                // using the authResult returned by parseHash, it can be determined if the user is logged in or not\n                if( authResult && authResult.accessToken && authResult.idToken ){\n                    this.setSession(authResult);\n                    resolve();\n                } else if(err){\n                    reject(err);\n                    console.log(err);\n                }\n            });\n        });\n    }\n    \n    setSession(authResult){\n        // Set the Token expiration time\n        const expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\n        // localStorage.setItem('access_token', authResult.accessToken);\n\n        Cookies.set('user', authResult.idTokenPayload);\n        Cookies.set('jwt', authResult.idToken);\n        Cookies.set('expiresAt', expiresAt);\n    }\n\n    logout(){\n        Cookies.remove('user');\n        Cookies.remove('jwt');\n        Cookies.remove('expiresAt');\n\n        this.auth0.logout({\n            returnTo: '',\n            clientID: 'pcZ8trYSuvn2qMqE720lSdIPaBQPSHLE'\n        })\n    }\n    \n    login(){\n        this.auth0.authorize();\n    }\n\n    async getJWKS(){\n        const res = await axios.get('https://guhaprasaanth.auth0.com/.well-known/jwks.json'); // get req to this endpoint to get JWKS\n        const jwks = res.data;\n        return jwks;\n    }\n\n    async verifyToken(token){\n        if(token){ // JWKS => JSON Web Key -> set of public keys that are used to verify JWT, \n            //- issued by authorization server(Auth0 in this application) and signed using the RS256 \n            const decodedToken = jwt.decode(token, {complete: true}); \n            // The property, complete should be specified to access the header of the token\n\n            if(!decodedToken) { return undefined; } // Logout the user and not display \"Internal Server Error\", when JWT token is chaanged\n\n            const jwks = await this.getJWKS(); // returns array(object)) of keys\n            \n            const jwk = jwks.keys[0];\n            \n            // Build Certificate\n            let cert = jwk.x5c[0];// Extracting the certificate\n            cert = cert.match(/.{1,64}/g).join('\\n'); // THe RegEx will create an array of strings, 64char long, \n            // which is later joined with a new line\n            cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`\n            // Compare the kid(Key ID) property of the token and the public key\n            \n            if(jwk.kid === decodedToken.header.kid){\n                try{\n                    const verifiedToken = jwt.verify(token, cert);\n                    const expiresAt = verifiedToken.exp * 1000;\n                    // If a decoded token exists && current time is < expiresAt\n                    return (verifiedToken && new Date().getTime() < expiresAt) ? verifiedToken : undefined;\n\n                }catch(err){\n                    return undefined;\n                }\n            }\n\n\n        }\n\n        // If there is no token\n        return undefined;\n    }\n\n    async clientAuth(){\n        debugger;\n        const token = Cookies.getJSON('jwt')    \n        const verifiedToken = await this.verifyToken(token);\n\n        return verifiedToken;\n    };\n\n\n    async serverAuth(req){ //The request obj(req) is available in the server side from the prop 'ctx' passed into getInitialProps()\n    // The cookies on the server may be found in the request obj\n        if(req.headers.cookie){\n            \n            const token = getCookieFromReq(req,'jwt');\n            const verifiedToken = await this.verifyToken(token);\n\n            return verifiedToken;\n        }\n        return undefined;\n    }\n}\n\nconst auth0Client = new Auth0();\n\nexport default auth0Client;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;;;;;;;;;;;AAGA;AACA;;AADA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;AAAA;AACA;;;AACA;AACA;;AADA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;;;;;;AAEA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;;AAOA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AACA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AAEA;;;;;AAEA;;AACA;AACA;;AADA;AAEA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;;;;A","sourceRoot":""}